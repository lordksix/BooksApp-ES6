"use strict";(self.webpackChunkbooksapp_es6=self.webpackChunkbooksapp_es6||[]).push([[826],{424:(t,e,n)=>{n.d(e,{Z:()=>o});var r=n(537),s=n.n(r),i=n(645),a=n.n(i)()(s());a.push([t.id,"* {\r\n  margin: 0;\r\n  padding: 0;\r\n  text-decoration: none;\r\n  list-style-type: none;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-flow: column;\r\n  padding: 10px;\r\n}\r\n\r\nsection {\r\n  display: none;\r\n  flex-flow: column;\r\n  align-items: center;\r\n  padding-block: 30px;\r\n  flex-grow: 1;\r\n  justify-items: center;\r\n}\r\n\r\n#bookSection {\r\n  display: flex;\r\n}\r\n\r\n.div {\r\n  margin-top: 30px;\r\n}\r\n\r\nh1,\r\nh2 {\r\n  margin-block: 10px;\r\n}\r\n\r\nh1 {\r\n  font-size: 1rem;\r\n}\r\n\r\nh2 {\r\n  font-size: 2rem;\r\n}\r\n\r\n.bookshelf {\r\n  display: flex;\r\n  flex-flow: column;\r\n  gap: 10px;\r\n  width: 100%;\r\n  max-width: 500px;\r\n  border: 2px solid black;\r\n  justify-items: center;\r\n  height: auto;\r\n}\r\n\r\n.book-row {\r\n  display: flex;\r\n  flex-flow: column;\r\n  align-items: center;\r\n  padding-block: 10px;\r\n  padding-inline: 20px;\r\n  gap: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.book-row:nth-child(odd) {\r\n  background-color: gainsboro;\r\n}\r\n\r\n.addbook {\r\n  display: flex;\r\n  flex-flow: column;\r\n  gap: 15px;\r\n  max-width: 450px;\r\n  align-items: center;\r\n}\r\n\r\n.addbook input {\r\n  width: 70vw;\r\n  max-width: 250px;\r\n}\r\n\r\nbutton {\r\n  padding-inline: 10px;\r\n  padding-block: 5px;\r\n}\r\n\r\n.addbook button {\r\n  display: flex;\r\n  align-self: end;\r\n}\r\n\r\nlabel {\r\n  display: none;\r\n}\r\n\r\nnav {\r\n  display: flex;\r\n  flex-flow: column;\r\n  width: 100%;\r\n  align-items: center;\r\n}\r\n\r\n.extremity {\r\n  padding-block: 10px;\r\n  padding-inline: 20px;\r\n  border: 2px solid black;\r\n}\r\n\r\n.nav {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  width: 100%;\r\n  max-width: 240px;\r\n  margin-block: auto;\r\n}\r\n\r\n.removeBtn {\r\n  box-shadow: 0 0 4px 4px black;\r\n}\r\n\r\n.active {\r\n  color: black;\r\n  font-weight: bold;\r\n}\r\n\r\n#contactSection ul {\r\n  padding-inline-start: 30px;\r\n}\r\n\r\n#contactSection li {\r\n  list-style-type: circle;\r\n}\r\n\r\n.time {\r\n  text-align: right;\r\n  margin-block-start: 5px;\r\n  margin-inline-end: 20px;\r\n  font-weight: bold;\r\n}\r\n\r\n@media screen and (min-width: 400px) {\r\n  .book-row {\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    justify-items: center;\r\n    padding: 10px;\r\n    column-gap: 30px;\r\n    align-items: center;\r\n  }\r\n\r\n  .book-row p {\r\n    justify-self: start;\r\n  }\r\n\r\n  nav {\r\n    display: flex;\r\n    flex-flow: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n}\r\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,qBAAqB;EACrB,qBAAqB;EACrB,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,iBAAiB;EACjB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,mBAAmB;EACnB,mBAAmB;EACnB,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;AAClB;;AAEA;;EAEE,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,SAAS;EACT,WAAW;EACX,gBAAgB;EAChB,uBAAuB;EACvB,qBAAqB;EACrB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,mBAAmB;EACnB,mBAAmB;EACnB,oBAAoB;EACpB,SAAS;EACT,kBAAkB;AACpB;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,SAAS;EACT,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,gBAAgB;AAClB;;AAEA;EACE,oBAAoB;EACpB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,oBAAoB;EACpB,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,6BAA6B;EAC7B,WAAW;EACX,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;EACjB,uBAAuB;EACvB,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;EACE;IACE,aAAa;IACb,+BAA+B;IAC/B,qBAAqB;IACrB,aAAa;IACb,gBAAgB;IAChB,mBAAmB;EACrB;;EAEA;IACE,mBAAmB;EACrB;;EAEA;IACE,aAAa;IACb,cAAc;IACd,8BAA8B;IAC9B,mBAAmB;EACrB;AACF",sourcesContent:["* {\r\n  margin: 0;\r\n  padding: 0;\r\n  text-decoration: none;\r\n  list-style-type: none;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-flow: column;\r\n  padding: 10px;\r\n}\r\n\r\nsection {\r\n  display: none;\r\n  flex-flow: column;\r\n  align-items: center;\r\n  padding-block: 30px;\r\n  flex-grow: 1;\r\n  justify-items: center;\r\n}\r\n\r\n#bookSection {\r\n  display: flex;\r\n}\r\n\r\n.div {\r\n  margin-top: 30px;\r\n}\r\n\r\nh1,\r\nh2 {\r\n  margin-block: 10px;\r\n}\r\n\r\nh1 {\r\n  font-size: 1rem;\r\n}\r\n\r\nh2 {\r\n  font-size: 2rem;\r\n}\r\n\r\n.bookshelf {\r\n  display: flex;\r\n  flex-flow: column;\r\n  gap: 10px;\r\n  width: 100%;\r\n  max-width: 500px;\r\n  border: 2px solid black;\r\n  justify-items: center;\r\n  height: auto;\r\n}\r\n\r\n.book-row {\r\n  display: flex;\r\n  flex-flow: column;\r\n  align-items: center;\r\n  padding-block: 10px;\r\n  padding-inline: 20px;\r\n  gap: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.book-row:nth-child(odd) {\r\n  background-color: gainsboro;\r\n}\r\n\r\n.addbook {\r\n  display: flex;\r\n  flex-flow: column;\r\n  gap: 15px;\r\n  max-width: 450px;\r\n  align-items: center;\r\n}\r\n\r\n.addbook input {\r\n  width: 70vw;\r\n  max-width: 250px;\r\n}\r\n\r\nbutton {\r\n  padding-inline: 10px;\r\n  padding-block: 5px;\r\n}\r\n\r\n.addbook button {\r\n  display: flex;\r\n  align-self: end;\r\n}\r\n\r\nlabel {\r\n  display: none;\r\n}\r\n\r\nnav {\r\n  display: flex;\r\n  flex-flow: column;\r\n  width: 100%;\r\n  align-items: center;\r\n}\r\n\r\n.extremity {\r\n  padding-block: 10px;\r\n  padding-inline: 20px;\r\n  border: 2px solid black;\r\n}\r\n\r\n.nav {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  width: 100%;\r\n  max-width: 240px;\r\n  margin-block: auto;\r\n}\r\n\r\n.removeBtn {\r\n  box-shadow: 0 0 4px 4px black;\r\n}\r\n\r\n.active {\r\n  color: black;\r\n  font-weight: bold;\r\n}\r\n\r\n#contactSection ul {\r\n  padding-inline-start: 30px;\r\n}\r\n\r\n#contactSection li {\r\n  list-style-type: circle;\r\n}\r\n\r\n.time {\r\n  text-align: right;\r\n  margin-block-start: 5px;\r\n  margin-inline-end: 20px;\r\n  font-weight: bold;\r\n}\r\n\r\n@media screen and (min-width: 400px) {\r\n  .book-row {\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    justify-items: center;\r\n    padding: 10px;\r\n    column-gap: 30px;\r\n    align-items: center;\r\n  }\r\n\r\n  .book-row p {\r\n    justify-self: start;\r\n  }\r\n\r\n  nav {\r\n    display: flex;\r\n    flex-flow: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const o=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,s,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var o=0;o<this.length;o++){var u=this[o][0];null!=u&&(a[u]=!0)}for(var l=0;l<t.length;l++){var c=[].concat(t[l]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),s&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=s):c[4]="".concat(s)),e.push(c))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(s," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],o=0;o<t.length;o++){var u=t[o],l=r.base?u[0]+r.base:u[0],c=i[l]||0,d="".concat(l," ").concat(c);i[l]=c+1;var h=n(d),m={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==h)e[h].references++,e[h].updater(m);else{var f=s(m,r);r.byIndex=o,e.splice(o,0,{identifier:d,updater:f,references:1})}a.push(d)}return a}function s(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,s){var i=r(t=t||[],s=s||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var o=n(i[a]);e[o].references--}for(var u=r(t,s),l=0;l<i.length;l++){var c=n(i[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=u}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,s&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},273:(t,e,n)=>{const r=(t,e)=>("string"==typeof e?t.classList.add(`${e}`):"object"==typeof e&&e.forEach((e=>t.classList.add(`${e}`))),t),s=(t,e=!1,n=0,r=null)=>(e&&t.setAttribute(`data-${e}`,n),r&&t.appendChild(r),t),i=(t,e=!1,n=!1)=>{const s=document.createElement(t);return r(s,e),n&&(s.textContent=n),s},a=(t,e,n,a)=>{const o=i("div",a),u=i("p",!1,`"${t}" by ${e}`);o.append(u);const l=((t,e,n,s=!1,i=!1)=>{const a=document.createElement("button");return a.type=t,a.ariaLabel=n,r(a,e),s&&(a.textContent=s),i&&a.addEventListener("click",(()=>{window.location.href=i})),a})("button","removeBtn","Remove Book","Remove");return s(l,"index",`${n}`),s(o,"book",`${n}`,l),o};class o{constructor(t,e){this.Title=t,this.Author=e}}const u={BookBinding:class{constructor(t){this.awesomeBooks=localStorage.getItem(`${t}`)?JSON.parse(localStorage.getItem(`${t}`)):[],this.localName=t}add(t,e,n,r){if(t.value.length&&e.value.length){const s=new o(t.value.trim(),e.value.trim());this.awesomeBooks=this.awesomeBooks.concat(s),localStorage.setItem(this.localName,JSON.stringify(this.awesomeBooks));const i=this.awesomeBooks.length-1;n.appendChild(a(t.value,e.value,i,r))}t.value="",e.value=""}removeBook(t,e,n){const r=this.awesomeBooks.slice(0,t),s=this.awesomeBooks.slice(t+1,this.awesomeBooks.length);this.awesomeBooks=r.concat(s),localStorage.setItem(this.localName,JSON.stringify(this.awesomeBooks)),n.removeChild(e)}static update(t,e,n){const r=localStorage.getItem(`${e}`)?JSON.parse(localStorage.getItem(`${e}`)):[],s=document.createDocumentFragment();r.forEach(((t,e)=>{s.append(a(t.Title,t.Author,e,n))})),t.innerHTML="",t.appendChild(s)}}};class l extends Error{}class c extends l{constructor(t){super(`Invalid DateTime: ${t.toMessage()}`)}}class d extends l{constructor(t){super(`Invalid Interval: ${t.toMessage()}`)}}class h extends l{constructor(t){super(`Invalid Duration: ${t.toMessage()}`)}}class m extends l{}class f extends l{constructor(t){super(`Invalid unit ${t}`)}}class y extends l{}class p extends l{constructor(){super("Zone is an abstract class")}}const g="numeric",A="short",w="long",v={year:g,month:g,day:g},b={year:g,month:A,day:g},E={year:g,month:A,day:g,weekday:A},k={year:g,month:w,day:g},x={year:g,month:w,day:g,weekday:w},S={hour:g,minute:g},T={hour:g,minute:g,second:g},C={hour:g,minute:g,second:g,timeZoneName:A},O={hour:g,minute:g,second:g,timeZoneName:w},N={hour:g,minute:g,hourCycle:"h23"},M={hour:g,minute:g,second:g,hourCycle:"h23"},B={hour:g,minute:g,second:g,hourCycle:"h23",timeZoneName:A},D={hour:g,minute:g,second:g,hourCycle:"h23",timeZoneName:w},I={year:g,month:g,day:g,hour:g,minute:g},V={year:g,month:g,day:g,hour:g,minute:g,second:g},$={year:g,month:A,day:g,hour:g,minute:g},Z={year:g,month:A,day:g,hour:g,minute:g,second:g},L={year:g,month:A,day:g,weekday:A,hour:g,minute:g},F={year:g,month:w,day:g,hour:g,minute:g,timeZoneName:A},j={year:g,month:w,day:g,hour:g,minute:g,second:g,timeZoneName:A},z={year:g,month:w,day:g,weekday:w,hour:g,minute:g,timeZoneName:w},q={year:g,month:w,day:g,weekday:w,hour:g,minute:g,second:g,timeZoneName:w};class U{get type(){throw new p}get name(){throw new p}get ianaName(){return this.name}get isUniversal(){throw new p}offsetName(t,e){throw new p}formatOffset(t,e){throw new p}offset(t){throw new p}equals(t){throw new p}get isValid(){throw new p}}let _=null;class W extends U{static get instance(){return null===_&&(_=new W),_}get type(){return"system"}get name(){return(new Intl.DateTimeFormat).resolvedOptions().timeZone}get isUniversal(){return!1}offsetName(t,{format:e,locale:n}){return Zt(t,e,n)}formatOffset(t,e){return zt(this.offset(t),e)}offset(t){return-new Date(t).getTimezoneOffset()}equals(t){return"system"===t.type}get isValid(){return!0}}let H={};const R={year:0,month:1,day:2,era:3,hour:4,minute:5,second:6};let J={};class Y extends U{static create(t){return J[t]||(J[t]=new Y(t)),J[t]}static resetCache(){J={},H={}}static isValidSpecifier(t){return this.isValidZone(t)}static isValidZone(t){if(!t)return!1;try{return new Intl.DateTimeFormat("en-US",{timeZone:t}).format(),!0}catch(t){return!1}}constructor(t){super(),this.zoneName=t,this.valid=Y.isValidZone(t)}get type(){return"iana"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(t,{format:e,locale:n}){return Zt(t,e,n,this.name)}formatOffset(t,e){return zt(this.offset(t),e)}offset(t){const e=new Date(t);if(isNaN(e))return NaN;const n=(r=this.name,H[r]||(H[r]=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:r,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",era:"short"})),H[r]);var r;let[s,i,a,o,u,l,c]=n.formatToParts?function(t,e){const n=t.formatToParts(e),r=[];for(let t=0;t<n.length;t++){const{type:e,value:s}=n[t],i=R[e];"era"===e?r[i]=s:At(i)||(r[i]=parseInt(s,10))}return r}(n,e):function(t,e){const n=t.format(e).replace(/\u200E/g,""),r=/(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(n),[,s,i,a,o,u,l,c]=r;return[a,s,i,o,u,l,c]}(n,e);"BC"===o&&(s=1-Math.abs(s));let d=+e;const h=d%1e3;return d-=h>=0?h:1e3+h,(It({year:s,month:i,day:a,hour:24===u?0:u,minute:l,second:c,millisecond:0})-d)/6e4}equals(t){return"iana"===t.type&&t.name===this.name}get isValid(){return this.valid}}let P={},G={};function Q(t,e={}){const n=JSON.stringify([t,e]);let r=G[n];return r||(r=new Intl.DateTimeFormat(t,e),G[n]=r),r}let X={},K={},tt=null;function et(t,e,n,r,s){const i=t.listingMode(n);return"error"===i?null:"en"===i?r(e):s(e)}class nt{constructor(t,e,n){this.padTo=n.padTo||0,this.floor=n.floor||!1;const{padTo:r,floor:s,...i}=n;if(!e||Object.keys(i).length>0){const e={useGrouping:!1,...n};n.padTo>0&&(e.minimumIntegerDigits=n.padTo),this.inf=function(t,e={}){const n=JSON.stringify([t,e]);let r=X[n];return r||(r=new Intl.NumberFormat(t,e),X[n]=r),r}(t,e)}}format(t){if(this.inf){const e=this.floor?Math.floor(t):t;return this.inf.format(e)}return St(this.floor?Math.floor(t):Nt(t,3),this.padTo)}}class rt{constructor(t,e,n){let r;if(this.opts=n,this.originalZone=void 0,this.opts.timeZone)this.dt=t;else if("fixed"===t.zone.type){const e=t.offset/60*-1,n=e>=0?`Etc/GMT+${e}`:`Etc/GMT${e}`;0!==t.offset&&Y.create(n).valid?(r=n,this.dt=t):(r="UTC",this.dt=0===t.offset?t:t.setZone("UTC").plus({minutes:t.offset}),this.originalZone=t.zone)}else"system"===t.zone.type?this.dt=t:"iana"===t.zone.type?(this.dt=t,r=t.zone.name):(r="UTC",this.dt=t.setZone("UTC").plus({minutes:t.offset}),this.originalZone=t.zone);const s={...this.opts};s.timeZone=s.timeZone||r,this.dtf=Q(e,s)}format(){return this.originalZone?this.formatToParts().map((({value:t})=>t)).join(""):this.dtf.format(this.dt.toJSDate())}formatToParts(){const t=this.dtf.formatToParts(this.dt.toJSDate());return this.originalZone?t.map((t=>{if("timeZoneName"===t.type){const e=this.originalZone.offsetName(this.dt.ts,{locale:this.dt.locale,format:this.opts.timeZoneName});return{...t,value:e}}return t})):t}resolvedOptions(){return this.dtf.resolvedOptions()}}class st{constructor(t,e,n){this.opts={style:"long",...n},!e&&bt()&&(this.rtf=function(t,e={}){const{base:n,...r}=e,s=JSON.stringify([t,r]);let i=K[s];return i||(i=new Intl.RelativeTimeFormat(t,e),K[s]=i),i}(t,n))}format(t,e){return this.rtf?this.rtf.format(t,e):function(t,e,n="always",r=!1){const s={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."]},i=-1===["hours","minutes","seconds"].indexOf(t);if("auto"===n&&i){const n="days"===t;switch(e){case 1:return n?"tomorrow":`next ${s[t][0]}`;case-1:return n?"yesterday":`last ${s[t][0]}`;case 0:return n?"today":`this ${s[t][0]}`}}const a=Object.is(e,-0)||e<0,o=Math.abs(e),u=1===o,l=s[t],c=r?u?l[1]:l[2]||l[1]:u?s[t][0]:t;return a?`${o} ${c} ago`:`in ${o} ${c}`}(e,t,this.opts.numeric,"long"!==this.opts.style)}formatToParts(t,e){return this.rtf?this.rtf.formatToParts(t,e):[]}}class it{static fromOpts(t){return it.create(t.locale,t.numberingSystem,t.outputCalendar,t.defaultToEN)}static create(t,e,n,r=!1){const s=t||gt.defaultLocale,i=s||(r?"en-US":tt||(tt=(new Intl.DateTimeFormat).resolvedOptions().locale,tt)),a=e||gt.defaultNumberingSystem,o=n||gt.defaultOutputCalendar;return new it(i,a,o,s)}static resetCache(){tt=null,G={},X={},K={}}static fromObject({locale:t,numberingSystem:e,outputCalendar:n}={}){return it.create(t,e,n)}constructor(t,e,n,r){const[s,i,a]=function(t){const e=t.indexOf("-x-");-1!==e&&(t=t.substring(0,e));const n=t.indexOf("-u-");if(-1===n)return[t];{let e,r;try{e=Q(t).resolvedOptions(),r=t}catch(s){const i=t.substring(0,n);e=Q(i).resolvedOptions(),r=i}const{numberingSystem:s,calendar:i}=e;return[r,s,i]}}(t);this.locale=s,this.numberingSystem=e||i||null,this.outputCalendar=n||a||null,this.intl=function(t,e,n){return n||e?(t.includes("-u-")||(t+="-u"),n&&(t+=`-ca-${n}`),e&&(t+=`-nu-${e}`),t):t}(this.locale,this.numberingSystem,this.outputCalendar),this.weekdaysCache={format:{},standalone:{}},this.monthsCache={format:{},standalone:{}},this.meridiemCache=null,this.eraCache={},this.specifiedLocale=r,this.fastNumbersCached=null}get fastNumbers(){var t;return null==this.fastNumbersCached&&(this.fastNumbersCached=(!(t=this).numberingSystem||"latn"===t.numberingSystem)&&("latn"===t.numberingSystem||!t.locale||t.locale.startsWith("en")||"latn"===new Intl.DateTimeFormat(t.intl).resolvedOptions().numberingSystem)),this.fastNumbersCached}listingMode(){const t=this.isEnglish(),e=!(null!==this.numberingSystem&&"latn"!==this.numberingSystem||null!==this.outputCalendar&&"gregory"!==this.outputCalendar);return t&&e?"en":"intl"}clone(t){return t&&0!==Object.getOwnPropertyNames(t).length?it.create(t.locale||this.specifiedLocale,t.numberingSystem||this.numberingSystem,t.outputCalendar||this.outputCalendar,t.defaultToEN||!1):this}redefaultToEN(t={}){return this.clone({...t,defaultToEN:!0})}redefaultToSystem(t={}){return this.clone({...t,defaultToEN:!1})}months(t,e=!1,n=!0){return et(this,t,n,Ht,(()=>{const n=e?{month:t,day:"numeric"}:{month:t},r=e?"format":"standalone";return this.monthsCache[r][t]||(this.monthsCache[r][t]=function(t){const e=[];for(let n=1;n<=12;n++){const r=rr.utc(2016,n,1);e.push(t(r))}return e}((t=>this.extract(t,n,"month")))),this.monthsCache[r][t]}))}weekdays(t,e=!1,n=!0){return et(this,t,n,Pt,(()=>{const n=e?{weekday:t,year:"numeric",month:"long",day:"numeric"}:{weekday:t},r=e?"format":"standalone";return this.weekdaysCache[r][t]||(this.weekdaysCache[r][t]=function(t){const e=[];for(let n=1;n<=7;n++){const r=rr.utc(2016,11,13+n);e.push(t(r))}return e}((t=>this.extract(t,n,"weekday")))),this.weekdaysCache[r][t]}))}meridiems(t=!0){return et(this,void 0,t,(()=>Gt),(()=>{if(!this.meridiemCache){const t={hour:"numeric",hourCycle:"h12"};this.meridiemCache=[rr.utc(2016,11,13,9),rr.utc(2016,11,13,19)].map((e=>this.extract(e,t,"dayperiod")))}return this.meridiemCache}))}eras(t,e=!0){return et(this,t,e,te,(()=>{const e={era:t};return this.eraCache[t]||(this.eraCache[t]=[rr.utc(-40,1,1),rr.utc(2017,1,1)].map((t=>this.extract(t,e,"era")))),this.eraCache[t]}))}extract(t,e,n){const r=this.dtFormatter(t,e).formatToParts().find((t=>t.type.toLowerCase()===n));return r?r.value:null}numberFormatter(t={}){return new nt(this.intl,t.forceSimple||this.fastNumbers,t)}dtFormatter(t,e={}){return new rt(t,this.intl,e)}relFormatter(t={}){return new st(this.intl,this.isEnglish(),t)}listFormatter(t={}){return function(t,e={}){const n=JSON.stringify([t,e]);let r=P[n];return r||(r=new Intl.ListFormat(t,e),P[n]=r),r}(this.intl,t)}isEnglish(){return"en"===this.locale||"en-us"===this.locale.toLowerCase()||new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")}equals(t){return this.locale===t.locale&&this.numberingSystem===t.numberingSystem&&this.outputCalendar===t.outputCalendar}}let at=null;class ot extends U{static get utcInstance(){return null===at&&(at=new ot(0)),at}static instance(t){return 0===t?ot.utcInstance:new ot(t)}static parseSpecifier(t){if(t){const e=t.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);if(e)return new ot(Lt(e[1],e[2]))}return null}constructor(t){super(),this.fixed=t}get type(){return"fixed"}get name(){return 0===this.fixed?"UTC":`UTC${zt(this.fixed,"narrow")}`}get ianaName(){return 0===this.fixed?"Etc/UTC":`Etc/GMT${zt(-this.fixed,"narrow")}`}offsetName(){return this.name}formatOffset(t,e){return zt(this.fixed,e)}get isUniversal(){return!0}offset(){return this.fixed}equals(t){return"fixed"===t.type&&t.fixed===this.fixed}get isValid(){return!0}}class ut extends U{constructor(t){super(),this.zoneName=t}get type(){return"invalid"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(){return null}formatOffset(){return""}offset(){return NaN}equals(){return!1}get isValid(){return!1}}function lt(t,e){if(At(t)||null===t)return e;if(t instanceof U)return t;if("string"==typeof t){const n=t.toLowerCase();return"default"===n?e:"local"===n||"system"===n?W.instance:"utc"===n||"gmt"===n?ot.utcInstance:ot.parseSpecifier(n)||Y.create(t)}return wt(t)?ot.instance(t):"object"==typeof t&&t.offset&&"number"==typeof t.offset?t:new ut(t)}let ct,dt=()=>Date.now(),ht="system",mt=null,ft=null,yt=null,pt=60;class gt{static get now(){return dt}static set now(t){dt=t}static set defaultZone(t){ht=t}static get defaultZone(){return lt(ht,W.instance)}static get defaultLocale(){return mt}static set defaultLocale(t){mt=t}static get defaultNumberingSystem(){return ft}static set defaultNumberingSystem(t){ft=t}static get defaultOutputCalendar(){return yt}static set defaultOutputCalendar(t){yt=t}static get twoDigitCutoffYear(){return pt}static set twoDigitCutoffYear(t){pt=t%100}static get throwOnInvalid(){return ct}static set throwOnInvalid(t){ct=t}static resetCaches(){it.resetCache(),Y.resetCache()}}function At(t){return void 0===t}function wt(t){return"number"==typeof t}function vt(t){return"number"==typeof t&&t%1==0}function bt(){try{return"undefined"!=typeof Intl&&!!Intl.RelativeTimeFormat}catch(t){return!1}}function Et(t,e,n){if(0!==t.length)return t.reduce(((t,r)=>{const s=[e(r),r];return t&&n(t[0],s[0])===t[0]?t:s}),null)[1]}function kt(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function xt(t,e,n){return vt(t)&&t>=e&&t<=n}function St(t,e=2){let n;return n=t<0?"-"+(""+-t).padStart(e,"0"):(""+t).padStart(e,"0"),n}function Tt(t){return At(t)||null===t||""===t?void 0:parseInt(t,10)}function Ct(t){return At(t)||null===t||""===t?void 0:parseFloat(t)}function Ot(t){if(!At(t)&&null!==t&&""!==t){const e=1e3*parseFloat("0."+t);return Math.floor(e)}}function Nt(t,e,n=!1){const r=10**e;return(n?Math.trunc:Math.round)(t*r)/r}function Mt(t){return t%4==0&&(t%100!=0||t%400==0)}function Bt(t){return Mt(t)?366:365}function Dt(t,e){const n=(r=e-1)-12*Math.floor(r/12)+1;var r;return 2===n?Mt(t+(e-n)/12)?29:28:[31,null,31,30,31,30,31,31,30,31,30,31][n-1]}function It(t){let e=Date.UTC(t.year,t.month-1,t.day,t.hour,t.minute,t.second,t.millisecond);return t.year<100&&t.year>=0&&(e=new Date(e),e.setUTCFullYear(t.year,t.month-1,t.day)),+e}function Vt(t){const e=(t+Math.floor(t/4)-Math.floor(t/100)+Math.floor(t/400))%7,n=t-1,r=(n+Math.floor(n/4)-Math.floor(n/100)+Math.floor(n/400))%7;return 4===e||3===r?53:52}function $t(t){return t>99?t:t>gt.twoDigitCutoffYear?1900+t:2e3+t}function Zt(t,e,n,r=null){const s=new Date(t),i={hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"};r&&(i.timeZone=r);const a={timeZoneName:e,...i},o=new Intl.DateTimeFormat(n,a).formatToParts(s).find((t=>"timezonename"===t.type.toLowerCase()));return o?o.value:null}function Lt(t,e){let n=parseInt(t,10);Number.isNaN(n)&&(n=0);const r=parseInt(e,10)||0;return 60*n+(n<0||Object.is(n,-0)?-r:r)}function Ft(t){const e=Number(t);if("boolean"==typeof t||""===t||Number.isNaN(e))throw new y(`Invalid unit value ${t}`);return e}function jt(t,e){const n={};for(const r in t)if(kt(t,r)){const s=t[r];if(null==s)continue;n[e(r)]=Ft(s)}return n}function zt(t,e){const n=Math.trunc(Math.abs(t/60)),r=Math.trunc(Math.abs(t%60)),s=t>=0?"+":"-";switch(e){case"short":return`${s}${St(n,2)}:${St(r,2)}`;case"narrow":return`${s}${n}${r>0?`:${r}`:""}`;case"techie":return`${s}${St(n,2)}${St(r,2)}`;default:throw new RangeError(`Value format ${e} is out of range for property format`)}}function qt(t){return function(t,e){return["hour","minute","second","millisecond"].reduce(((e,n)=>(e[n]=t[n],e)),{})}(t)}const Ut=["January","February","March","April","May","June","July","August","September","October","November","December"],_t=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],Wt=["J","F","M","A","M","J","J","A","S","O","N","D"];function Ht(t){switch(t){case"narrow":return[...Wt];case"short":return[..._t];case"long":return[...Ut];case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"];default:return null}}const Rt=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],Jt=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],Yt=["M","T","W","T","F","S","S"];function Pt(t){switch(t){case"narrow":return[...Yt];case"short":return[...Jt];case"long":return[...Rt];case"numeric":return["1","2","3","4","5","6","7"];default:return null}}const Gt=["AM","PM"],Qt=["Before Christ","Anno Domini"],Xt=["BC","AD"],Kt=["B","A"];function te(t){switch(t){case"narrow":return[...Kt];case"short":return[...Xt];case"long":return[...Qt];default:return null}}function ee(t,e){let n="";for(const r of t)r.literal?n+=r.val:n+=e(r.val);return n}const ne={D:v,DD:b,DDD:k,DDDD:x,t:S,tt:T,ttt:C,tttt:O,T:N,TT:M,TTT:B,TTTT:D,f:I,ff:$,fff:F,ffff:z,F:V,FF:Z,FFF:j,FFFF:q};class re{static create(t,e={}){return new re(t,e)}static parseFormat(t){let e=null,n="",r=!1;const s=[];for(let i=0;i<t.length;i++){const a=t.charAt(i);"'"===a?(n.length>0&&s.push({literal:r||/^\s+$/.test(n),val:n}),e=null,n="",r=!r):r||a===e?n+=a:(n.length>0&&s.push({literal:/^\s+$/.test(n),val:n}),n=a,e=a)}return n.length>0&&s.push({literal:r||/^\s+$/.test(n),val:n}),s}static macroTokenToFormatOpts(t){return ne[t]}constructor(t,e){this.opts=e,this.loc=t,this.systemLoc=null}formatWithSystemDefault(t,e){return null===this.systemLoc&&(this.systemLoc=this.loc.redefaultToSystem()),this.systemLoc.dtFormatter(t,{...this.opts,...e}).format()}formatDateTime(t,e={}){return this.loc.dtFormatter(t,{...this.opts,...e}).format()}formatDateTimeParts(t,e={}){return this.loc.dtFormatter(t,{...this.opts,...e}).formatToParts()}formatInterval(t,e={}){return this.loc.dtFormatter(t.start,{...this.opts,...e}).dtf.formatRange(t.start.toJSDate(),t.end.toJSDate())}resolvedOptions(t,e={}){return this.loc.dtFormatter(t,{...this.opts,...e}).resolvedOptions()}num(t,e=0){if(this.opts.forceSimple)return St(t,e);const n={...this.opts};return e>0&&(n.padTo=e),this.loc.numberFormatter(n).format(t)}formatDateTimeFromString(t,e){const n="en"===this.loc.listingMode(),r=this.loc.outputCalendar&&"gregory"!==this.loc.outputCalendar,s=(e,n)=>this.loc.extract(t,e,n),i=e=>t.isOffsetFixed&&0===t.offset&&e.allowZ?"Z":t.isValid?t.zone.formatOffset(t.ts,e.format):"",a=(e,r)=>n?function(t,e){return Ht(e)[t.month-1]}(t,e):s(r?{month:e}:{month:e,day:"numeric"},"month"),o=(e,r)=>n?function(t,e){return Pt(e)[t.weekday-1]}(t,e):s(r?{weekday:e}:{weekday:e,month:"long",day:"numeric"},"weekday"),u=e=>{const n=re.macroTokenToFormatOpts(e);return n?this.formatWithSystemDefault(t,n):e},l=e=>n?function(t,e){return te(e)[t.year<0?0:1]}(t,e):s({era:e},"era");return ee(re.parseFormat(e),(e=>{switch(e){case"S":return this.num(t.millisecond);case"u":case"SSS":return this.num(t.millisecond,3);case"s":return this.num(t.second);case"ss":return this.num(t.second,2);case"uu":return this.num(Math.floor(t.millisecond/10),2);case"uuu":return this.num(Math.floor(t.millisecond/100));case"m":return this.num(t.minute);case"mm":return this.num(t.minute,2);case"h":return this.num(t.hour%12==0?12:t.hour%12);case"hh":return this.num(t.hour%12==0?12:t.hour%12,2);case"H":return this.num(t.hour);case"HH":return this.num(t.hour,2);case"Z":return i({format:"narrow",allowZ:this.opts.allowZ});case"ZZ":return i({format:"short",allowZ:this.opts.allowZ});case"ZZZ":return i({format:"techie",allowZ:this.opts.allowZ});case"ZZZZ":return t.zone.offsetName(t.ts,{format:"short",locale:this.loc.locale});case"ZZZZZ":return t.zone.offsetName(t.ts,{format:"long",locale:this.loc.locale});case"z":return t.zoneName;case"a":return n?function(t){return Gt[t.hour<12?0:1]}(t):s({hour:"numeric",hourCycle:"h12"},"dayperiod");case"d":return r?s({day:"numeric"},"day"):this.num(t.day);case"dd":return r?s({day:"2-digit"},"day"):this.num(t.day,2);case"c":case"E":return this.num(t.weekday);case"ccc":return o("short",!0);case"cccc":return o("long",!0);case"ccccc":return o("narrow",!0);case"EEE":return o("short",!1);case"EEEE":return o("long",!1);case"EEEEE":return o("narrow",!1);case"L":return r?s({month:"numeric",day:"numeric"},"month"):this.num(t.month);case"LL":return r?s({month:"2-digit",day:"numeric"},"month"):this.num(t.month,2);case"LLL":return a("short",!0);case"LLLL":return a("long",!0);case"LLLLL":return a("narrow",!0);case"M":return r?s({month:"numeric"},"month"):this.num(t.month);case"MM":return r?s({month:"2-digit"},"month"):this.num(t.month,2);case"MMM":return a("short",!1);case"MMMM":return a("long",!1);case"MMMMM":return a("narrow",!1);case"y":return r?s({year:"numeric"},"year"):this.num(t.year);case"yy":return r?s({year:"2-digit"},"year"):this.num(t.year.toString().slice(-2),2);case"yyyy":return r?s({year:"numeric"},"year"):this.num(t.year,4);case"yyyyyy":return r?s({year:"numeric"},"year"):this.num(t.year,6);case"G":return l("short");case"GG":return l("long");case"GGGGG":return l("narrow");case"kk":return this.num(t.weekYear.toString().slice(-2),2);case"kkkk":return this.num(t.weekYear,4);case"W":return this.num(t.weekNumber);case"WW":return this.num(t.weekNumber,2);case"o":return this.num(t.ordinal);case"ooo":return this.num(t.ordinal,3);case"q":return this.num(t.quarter);case"qq":return this.num(t.quarter,2);case"X":return this.num(Math.floor(t.ts/1e3));case"x":return this.num(t.ts);default:return u(e)}}))}formatDurationFromString(t,e){const n=t=>{switch(t[0]){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":return"hour";case"d":return"day";case"w":return"week";case"M":return"month";case"y":return"year";default:return null}},r=re.parseFormat(e),s=r.reduce(((t,{literal:e,val:n})=>e?t:t.concat(n)),[]);return ee(r,(t=>e=>{const r=n(e);return r?this.num(t.get(r),e.length):e})(t.shiftTo(...s.map(n).filter((t=>t)))))}}class se{constructor(t,e){this.reason=t,this.explanation=e}toMessage(){return this.explanation?`${this.reason}: ${this.explanation}`:this.reason}}const ie=/[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;function ae(...t){const e=t.reduce(((t,e)=>t+e.source),"");return RegExp(`^${e}$`)}function oe(...t){return e=>t.reduce((([t,n,r],s)=>{const[i,a,o]=s(e,r);return[{...t,...i},a||n,o]}),[{},null,1]).slice(0,2)}function ue(t,...e){if(null==t)return[null,null];for(const[n,r]of e){const e=n.exec(t);if(e)return r(e)}return[null,null]}function le(...t){return(e,n)=>{const r={};let s;for(s=0;s<t.length;s++)r[t[s]]=Tt(e[n+s]);return[r,null,n+s]}}const ce=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,de=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,he=RegExp(`${de.source}(?:${ce.source}?(?:\\[(${ie.source})\\])?)?`),me=RegExp(`(?:T${he.source})?`),fe=le("weekYear","weekNumber","weekDay"),ye=le("year","ordinal"),pe=RegExp(`${de.source} ?(?:${ce.source}|(${ie.source}))?`),ge=RegExp(`(?: ${pe.source})?`);function Ae(t,e,n){const r=t[e];return At(r)?n:Tt(r)}function we(t,e){return[{hours:Ae(t,e,0),minutes:Ae(t,e+1,0),seconds:Ae(t,e+2,0),milliseconds:Ot(t[e+3])},null,e+4]}function ve(t,e){const n=!t[e]&&!t[e+1],r=Lt(t[e+1],t[e+2]);return[{},n?null:ot.instance(r),e+3]}function be(t,e){return[{},t[e]?Y.create(t[e]):null,e+1]}const Ee=RegExp(`^T?${de.source}$`),ke=/^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;function xe(t){const[e,n,r,s,i,a,o,u,l]=t,c="-"===e[0],d=u&&"-"===u[0],h=(t,e=!1)=>void 0!==t&&(e||t&&c)?-t:t;return[{years:h(Ct(n)),months:h(Ct(r)),weeks:h(Ct(s)),days:h(Ct(i)),hours:h(Ct(a)),minutes:h(Ct(o)),seconds:h(Ct(u),"-0"===u),milliseconds:h(Ot(l),d)}]}const Se={GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Te(t,e,n,r,s,i,a){const o={year:2===e.length?$t(Tt(e)):Tt(e),month:_t.indexOf(n)+1,day:Tt(r),hour:Tt(s),minute:Tt(i)};return a&&(o.second=Tt(a)),t&&(o.weekday=t.length>3?Rt.indexOf(t)+1:Jt.indexOf(t)+1),o}const Ce=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function Oe(t){const[,e,n,r,s,i,a,o,u,l,c,d]=t,h=Te(e,s,r,n,i,a,o);let m;return m=u?Se[u]:l?0:Lt(c,d),[h,new ot(m)]}const Ne=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,Me=/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,Be=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function De(t){const[,e,n,r,s,i,a,o]=t;return[Te(e,s,r,n,i,a,o),ot.utcInstance]}function Ie(t){const[,e,n,r,s,i,a,o]=t;return[Te(e,o,n,r,s,i,a),ot.utcInstance]}const Ve=ae(/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,me),$e=ae(/(\d{4})-?W(\d\d)(?:-?(\d))?/,me),Ze=ae(/(\d{4})-?(\d{3})/,me),Le=ae(he),Fe=oe((function(t,e){return[{year:Ae(t,e),month:Ae(t,e+1,1),day:Ae(t,e+2,1)},null,e+3]}),we,ve,be),je=oe(fe,we,ve,be),ze=oe(ye,we,ve,be),qe=oe(we,ve,be),Ue=oe(we),_e=ae(/(\d{4})-(\d\d)-(\d\d)/,ge),We=ae(pe),He=oe(we,ve,be),Re={weeks:{days:7,hours:168,minutes:10080,seconds:604800,milliseconds:6048e5},days:{hours:24,minutes:1440,seconds:86400,milliseconds:864e5},hours:{minutes:60,seconds:3600,milliseconds:36e5},minutes:{seconds:60,milliseconds:6e4},seconds:{milliseconds:1e3}},Je={years:{quarters:4,months:12,weeks:52,days:365,hours:8760,minutes:525600,seconds:31536e3,milliseconds:31536e6},quarters:{months:3,weeks:13,days:91,hours:2184,minutes:131040,seconds:7862400,milliseconds:78624e5},months:{weeks:4,days:30,hours:720,minutes:43200,seconds:2592e3,milliseconds:2592e6},...Re},Ye={years:{quarters:4,months:12,weeks:52.1775,days:365.2425,hours:8765.82,minutes:525949.2,seconds:525949.2*60,milliseconds:525949.2*60*1e3},quarters:{months:3,weeks:13.044375,days:91.310625,hours:2191.455,minutes:131487.3,seconds:525949.2*60/4,milliseconds:7889237999.999999},months:{weeks:4.3481250000000005,days:30.436875,hours:730.485,minutes:43829.1,seconds:2629746,milliseconds:2629746e3},...Re},Pe=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],Ge=Pe.slice(0).reverse();function Qe(t,e,n=!1){const r={values:n?e.values:{...t.values,...e.values||{}},loc:t.loc.clone(e.loc),conversionAccuracy:e.conversionAccuracy||t.conversionAccuracy,matrix:e.matrix||t.matrix};return new Ke(r)}function Xe(t,e,n,r,s){const i=t[s][n],a=e[n]/i,o=Math.sign(a)!==Math.sign(r[s])&&0!==r[s]&&Math.abs(a)<=1?function(t){return t<0?Math.floor(t):Math.ceil(t)}(a):Math.trunc(a);r[s]+=o,e[n]-=o*i}class Ke{constructor(t){const e="longterm"===t.conversionAccuracy||!1;let n=e?Ye:Je;t.matrix&&(n=t.matrix),this.values=t.values,this.loc=t.loc||it.create(),this.conversionAccuracy=e?"longterm":"casual",this.invalid=t.invalid||null,this.matrix=n,this.isLuxonDuration=!0}static fromMillis(t,e){return Ke.fromObject({milliseconds:t},e)}static fromObject(t,e={}){if(null==t||"object"!=typeof t)throw new y("Duration.fromObject: argument expected to be an object, got "+(null===t?"null":typeof t));return new Ke({values:jt(t,Ke.normalizeUnit),loc:it.fromObject(e),conversionAccuracy:e.conversionAccuracy,matrix:e.matrix})}static fromDurationLike(t){if(wt(t))return Ke.fromMillis(t);if(Ke.isDuration(t))return t;if("object"==typeof t)return Ke.fromObject(t);throw new y(`Unknown duration argument ${t} of type ${typeof t}`)}static fromISO(t,e){const[n]=function(t){return ue(t,[ke,xe])}(t);return n?Ke.fromObject(n,e):Ke.invalid("unparsable",`the input "${t}" can't be parsed as ISO 8601`)}static fromISOTime(t,e){const[n]=function(t){return ue(t,[Ee,Ue])}(t);return n?Ke.fromObject(n,e):Ke.invalid("unparsable",`the input "${t}" can't be parsed as ISO 8601`)}static invalid(t,e=null){if(!t)throw new y("need to specify a reason the Duration is invalid");const n=t instanceof se?t:new se(t,e);if(gt.throwOnInvalid)throw new h(n);return new Ke({invalid:n})}static normalizeUnit(t){const e={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[t?t.toLowerCase():t];if(!e)throw new f(t);return e}static isDuration(t){return t&&t.isLuxonDuration||!1}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}toFormat(t,e={}){const n={...e,floor:!1!==e.round&&!1!==e.floor};return this.isValid?re.create(this.loc,n).formatDurationFromString(this,t):"Invalid Duration"}toHuman(t={}){const e=Pe.map((e=>{const n=this.values[e];return At(n)?null:this.loc.numberFormatter({style:"unit",unitDisplay:"long",...t,unit:e.slice(0,-1)}).format(n)})).filter((t=>t));return this.loc.listFormatter({type:"conjunction",style:t.listStyle||"narrow",...t}).format(e)}toObject(){return this.isValid?{...this.values}:{}}toISO(){if(!this.isValid)return null;let t="P";return 0!==this.years&&(t+=this.years+"Y"),0===this.months&&0===this.quarters||(t+=this.months+3*this.quarters+"M"),0!==this.weeks&&(t+=this.weeks+"W"),0!==this.days&&(t+=this.days+"D"),0===this.hours&&0===this.minutes&&0===this.seconds&&0===this.milliseconds||(t+="T"),0!==this.hours&&(t+=this.hours+"H"),0!==this.minutes&&(t+=this.minutes+"M"),0===this.seconds&&0===this.milliseconds||(t+=Nt(this.seconds+this.milliseconds/1e3,3)+"S"),"P"===t&&(t+="T0S"),t}toISOTime(t={}){if(!this.isValid)return null;const e=this.toMillis();if(e<0||e>=864e5)return null;t={suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended",...t};const n=this.shiftTo("hours","minutes","seconds","milliseconds");let r="basic"===t.format?"hhmm":"hh:mm";t.suppressSeconds&&0===n.seconds&&0===n.milliseconds||(r+="basic"===t.format?"ss":":ss",t.suppressMilliseconds&&0===n.milliseconds||(r+=".SSS"));let s=n.toFormat(r);return t.includePrefix&&(s="T"+s),s}toJSON(){return this.toISO()}toString(){return this.toISO()}toMillis(){return this.as("milliseconds")}valueOf(){return this.toMillis()}plus(t){if(!this.isValid)return this;const e=Ke.fromDurationLike(t),n={};for(const t of Pe)(kt(e.values,t)||kt(this.values,t))&&(n[t]=e.get(t)+this.get(t));return Qe(this,{values:n},!0)}minus(t){if(!this.isValid)return this;const e=Ke.fromDurationLike(t);return this.plus(e.negate())}mapUnits(t){if(!this.isValid)return this;const e={};for(const n of Object.keys(this.values))e[n]=Ft(t(this.values[n],n));return Qe(this,{values:e},!0)}get(t){return this[Ke.normalizeUnit(t)]}set(t){return this.isValid?Qe(this,{values:{...this.values,...jt(t,Ke.normalizeUnit)}}):this}reconfigure({locale:t,numberingSystem:e,conversionAccuracy:n,matrix:r}={}){return Qe(this,{loc:this.loc.clone({locale:t,numberingSystem:e}),matrix:r,conversionAccuracy:n})}as(t){return this.isValid?this.shiftTo(t).get(t):NaN}normalize(){if(!this.isValid)return this;const t=this.toObject();return function(t,e){Ge.reduce(((n,r)=>At(e[r])?n:(n&&Xe(t,e,n,e,r),r)),null)}(this.matrix,t),Qe(this,{values:t},!0)}rescale(){return this.isValid?Qe(this,{values:function(t){const e={};for(const[n,r]of Object.entries(t))0!==r&&(e[n]=r);return e}(this.normalize().shiftToAll().toObject())},!0):this}shiftTo(...t){if(!this.isValid)return this;if(0===t.length)return this;t=t.map((t=>Ke.normalizeUnit(t)));const e={},n={},r=this.toObject();let s;for(const i of Pe)if(t.indexOf(i)>=0){s=i;let t=0;for(const e in n)t+=this.matrix[e][i]*n[e],n[e]=0;wt(r[i])&&(t+=r[i]);const a=Math.trunc(t);e[i]=a,n[i]=(1e3*t-1e3*a)/1e3;for(const t in r)Pe.indexOf(t)>Pe.indexOf(i)&&Xe(this.matrix,r,t,e,i)}else wt(r[i])&&(n[i]=r[i]);for(const t in n)0!==n[t]&&(e[s]+=t===s?n[t]:n[t]/this.matrix[s][t]);return Qe(this,{values:e},!0).normalize()}shiftToAll(){return this.isValid?this.shiftTo("years","months","weeks","days","hours","minutes","seconds","milliseconds"):this}negate(){if(!this.isValid)return this;const t={};for(const e of Object.keys(this.values))t[e]=0===this.values[e]?0:-this.values[e];return Qe(this,{values:t},!0)}get years(){return this.isValid?this.values.years||0:NaN}get quarters(){return this.isValid?this.values.quarters||0:NaN}get months(){return this.isValid?this.values.months||0:NaN}get weeks(){return this.isValid?this.values.weeks||0:NaN}get days(){return this.isValid?this.values.days||0:NaN}get hours(){return this.isValid?this.values.hours||0:NaN}get minutes(){return this.isValid?this.values.minutes||0:NaN}get seconds(){return this.isValid?this.values.seconds||0:NaN}get milliseconds(){return this.isValid?this.values.milliseconds||0:NaN}get isValid(){return null===this.invalid}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}equals(t){if(!this.isValid||!t.isValid)return!1;if(!this.loc.equals(t.loc))return!1;for(const r of Pe)if(e=this.values[r],n=t.values[r],!(void 0===e||0===e?void 0===n||0===n:e===n))return!1;var e,n;return!0}}const tn="Invalid Interval";class en{constructor(t){this.s=t.start,this.e=t.end,this.invalid=t.invalid||null,this.isLuxonInterval=!0}static invalid(t,e=null){if(!t)throw new y("need to specify a reason the Interval is invalid");const n=t instanceof se?t:new se(t,e);if(gt.throwOnInvalid)throw new d(n);return new en({invalid:n})}static fromDateTimes(t,e){const n=sr(t),r=sr(e),s=function(t,e){return t&&t.isValid?e&&e.isValid?e<t?en.invalid("end before start",`The end of an interval must be after its start, but you had start=${t.toISO()} and end=${e.toISO()}`):null:en.invalid("missing or invalid end"):en.invalid("missing or invalid start")}(n,r);return null==s?new en({start:n,end:r}):s}static after(t,e){const n=Ke.fromDurationLike(e),r=sr(t);return en.fromDateTimes(r,r.plus(n))}static before(t,e){const n=Ke.fromDurationLike(e),r=sr(t);return en.fromDateTimes(r.minus(n),r)}static fromISO(t,e){const[n,r]=(t||"").split("/",2);if(n&&r){let t,s,i,a;try{t=rr.fromISO(n,e),s=t.isValid}catch(r){s=!1}try{i=rr.fromISO(r,e),a=i.isValid}catch(r){a=!1}if(s&&a)return en.fromDateTimes(t,i);if(s){const n=Ke.fromISO(r,e);if(n.isValid)return en.after(t,n)}else if(a){const t=Ke.fromISO(n,e);if(t.isValid)return en.before(i,t)}}return en.invalid("unparsable",`the input "${t}" can't be parsed as ISO 8601`)}static isInterval(t){return t&&t.isLuxonInterval||!1}get start(){return this.isValid?this.s:null}get end(){return this.isValid?this.e:null}get isValid(){return null===this.invalidReason}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}length(t="milliseconds"){return this.isValid?this.toDuration(t).get(t):NaN}count(t="milliseconds"){if(!this.isValid)return NaN;const e=this.start.startOf(t),n=this.end.startOf(t);return Math.floor(n.diff(e,t).get(t))+(n.valueOf()!==this.end.valueOf())}hasSame(t){return!!this.isValid&&(this.isEmpty()||this.e.minus(1).hasSame(this.s,t))}isEmpty(){return this.s.valueOf()===this.e.valueOf()}isAfter(t){return!!this.isValid&&this.s>t}isBefore(t){return!!this.isValid&&this.e<=t}contains(t){return!!this.isValid&&this.s<=t&&this.e>t}set({start:t,end:e}={}){return this.isValid?en.fromDateTimes(t||this.s,e||this.e):this}splitAt(...t){if(!this.isValid)return[];const e=t.map(sr).filter((t=>this.contains(t))).sort(),n=[];let{s:r}=this,s=0;for(;r<this.e;){const t=e[s]||this.e,i=+t>+this.e?this.e:t;n.push(en.fromDateTimes(r,i)),r=i,s+=1}return n}splitBy(t){const e=Ke.fromDurationLike(t);if(!this.isValid||!e.isValid||0===e.as("milliseconds"))return[];let n,{s:r}=this,s=1;const i=[];for(;r<this.e;){const t=this.start.plus(e.mapUnits((t=>t*s)));n=+t>+this.e?this.e:t,i.push(en.fromDateTimes(r,n)),r=n,s+=1}return i}divideEqually(t){return this.isValid?this.splitBy(this.length()/t).slice(0,t):[]}overlaps(t){return this.e>t.s&&this.s<t.e}abutsStart(t){return!!this.isValid&&+this.e==+t.s}abutsEnd(t){return!!this.isValid&&+t.e==+this.s}engulfs(t){return!!this.isValid&&this.s<=t.s&&this.e>=t.e}equals(t){return!(!this.isValid||!t.isValid)&&this.s.equals(t.s)&&this.e.equals(t.e)}intersection(t){if(!this.isValid)return this;const e=this.s>t.s?this.s:t.s,n=this.e<t.e?this.e:t.e;return e>=n?null:en.fromDateTimes(e,n)}union(t){if(!this.isValid)return this;const e=this.s<t.s?this.s:t.s,n=this.e>t.e?this.e:t.e;return en.fromDateTimes(e,n)}static merge(t){const[e,n]=t.sort(((t,e)=>t.s-e.s)).reduce((([t,e],n)=>e?e.overlaps(n)||e.abutsStart(n)?[t,e.union(n)]:[t.concat([e]),n]:[t,n]),[[],null]);return n&&e.push(n),e}static xor(t){let e=null,n=0;const r=[],s=t.map((t=>[{time:t.s,type:"s"},{time:t.e,type:"e"}])),i=Array.prototype.concat(...s).sort(((t,e)=>t.time-e.time));for(const t of i)n+="s"===t.type?1:-1,1===n?e=t.time:(e&&+e!=+t.time&&r.push(en.fromDateTimes(e,t.time)),e=null);return en.merge(r)}difference(...t){return en.xor([this].concat(t)).map((t=>this.intersection(t))).filter((t=>t&&!t.isEmpty()))}toString(){return this.isValid?`[${this.s.toISO()} – ${this.e.toISO()})`:tn}toLocaleString(t=v,e={}){return this.isValid?re.create(this.s.loc.clone(e),t).formatInterval(this):tn}toISO(t){return this.isValid?`${this.s.toISO(t)}/${this.e.toISO(t)}`:tn}toISODate(){return this.isValid?`${this.s.toISODate()}/${this.e.toISODate()}`:tn}toISOTime(t){return this.isValid?`${this.s.toISOTime(t)}/${this.e.toISOTime(t)}`:tn}toFormat(t,{separator:e=" – "}={}){return this.isValid?`${this.s.toFormat(t)}${e}${this.e.toFormat(t)}`:tn}toDuration(t,e){return this.isValid?this.e.diff(this.s,t,e):Ke.invalid(this.invalidReason)}mapEndpoints(t){return en.fromDateTimes(t(this.s),t(this.e))}}class nn{static hasDST(t=gt.defaultZone){const e=rr.now().setZone(t).set({month:12});return!t.isUniversal&&e.offset!==e.set({month:6}).offset}static isValidIANAZone(t){return Y.isValidZone(t)}static normalizeZone(t){return lt(t,gt.defaultZone)}static months(t="long",{locale:e=null,numberingSystem:n=null,locObj:r=null,outputCalendar:s="gregory"}={}){return(r||it.create(e,n,s)).months(t)}static monthsFormat(t="long",{locale:e=null,numberingSystem:n=null,locObj:r=null,outputCalendar:s="gregory"}={}){return(r||it.create(e,n,s)).months(t,!0)}static weekdays(t="long",{locale:e=null,numberingSystem:n=null,locObj:r=null}={}){return(r||it.create(e,n,null)).weekdays(t)}static weekdaysFormat(t="long",{locale:e=null,numberingSystem:n=null,locObj:r=null}={}){return(r||it.create(e,n,null)).weekdays(t,!0)}static meridiems({locale:t=null}={}){return it.create(t).meridiems()}static eras(t="short",{locale:e=null}={}){return it.create(e,null,"gregory").eras(t)}static features(){return{relative:bt()}}}function rn(t,e){const n=t=>t.toUTC(0,{keepLocalTime:!0}).startOf("day").valueOf(),r=n(e)-n(t);return Math.floor(Ke.fromMillis(r).as("days"))}const sn={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},an={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},on=sn.hanidec.replace(/[\[|\]]/g,"").split("");function un({numberingSystem:t},e=""){return new RegExp(`${sn[t||"latn"]}${e}`)}function ln(t,e=(t=>t)){return{regex:t,deser:([t])=>e(function(t){let e=parseInt(t,10);if(isNaN(e)){e="";for(let n=0;n<t.length;n++){const r=t.charCodeAt(n);if(-1!==t[n].search(sn.hanidec))e+=on.indexOf(t[n]);else for(const t in an){const[n,s]=an[t];r>=n&&r<=s&&(e+=r-n)}}return parseInt(e,10)}return e}(t))}}const cn=`[ ${String.fromCharCode(160)}]`,dn=new RegExp(cn,"g");function hn(t){return t.replace(/\./g,"\\.?").replace(dn,cn)}function mn(t){return t.replace(/\./g,"").replace(dn," ").toLowerCase()}function fn(t,e){return null===t?null:{regex:RegExp(t.map(hn).join("|")),deser:([n])=>t.findIndex((t=>mn(n)===mn(t)))+e}}function yn(t,e){return{regex:t,deser:([,t,e])=>Lt(t,e),groups:e}}function pn(t){return{regex:t,deser:([t])=>t}}const gn={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayperiod:"a",dayPeriod:"a",hour:{numeric:"h","2-digit":"hh"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"},timeZoneName:{long:"ZZZZZ",short:"ZZZ"}};let An=null;function wn(t,e){return Array.prototype.concat(...t.map((t=>function(t,e){if(t.literal)return t;const n=bn(re.macroTokenToFormatOpts(t.val),e);return null==n||n.includes(void 0)?t:n}(t,e))))}function vn(t,e,n){const r=wn(re.parseFormat(n),t),s=r.map((e=>function(t,e){const n=un(e),r=un(e,"{2}"),s=un(e,"{3}"),i=un(e,"{4}"),a=un(e,"{6}"),o=un(e,"{1,2}"),u=un(e,"{1,3}"),l=un(e,"{1,6}"),c=un(e,"{1,9}"),d=un(e,"{2,4}"),h=un(e,"{4,6}"),m=t=>{return{regex:RegExp((e=t.val,e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"))),deser:([t])=>t,literal:!0};var e},f=(f=>{if(t.literal)return m(f);switch(f.val){case"G":return fn(e.eras("short",!1),0);case"GG":return fn(e.eras("long",!1),0);case"y":return ln(l);case"yy":case"kk":return ln(d,$t);case"yyyy":case"kkkk":return ln(i);case"yyyyy":return ln(h);case"yyyyyy":return ln(a);case"M":case"L":case"d":case"H":case"h":case"m":case"q":case"s":case"W":return ln(o);case"MM":case"LL":case"dd":case"HH":case"hh":case"mm":case"qq":case"ss":case"WW":return ln(r);case"MMM":return fn(e.months("short",!0,!1),1);case"MMMM":return fn(e.months("long",!0,!1),1);case"LLL":return fn(e.months("short",!1,!1),1);case"LLLL":return fn(e.months("long",!1,!1),1);case"o":case"S":return ln(u);case"ooo":case"SSS":return ln(s);case"u":return pn(c);case"uu":return pn(o);case"uuu":case"E":case"c":return ln(n);case"a":return fn(e.meridiems(),0);case"EEE":return fn(e.weekdays("short",!1,!1),1);case"EEEE":return fn(e.weekdays("long",!1,!1),1);case"ccc":return fn(e.weekdays("short",!0,!1),1);case"cccc":return fn(e.weekdays("long",!0,!1),1);case"Z":case"ZZ":return yn(new RegExp(`([+-]${o.source})(?::(${r.source}))?`),2);case"ZZZ":return yn(new RegExp(`([+-]${o.source})(${r.source})?`),2);case"z":return pn(/[a-z_+-/]{1,256}?/i);case" ":return pn(/[^\S\n\r]/);default:return m(f)}})(t)||{invalidReason:"missing Intl.DateTimeFormat.formatToParts support"};return f.token=t,f}(e,t))),i=s.find((t=>t.invalidReason));if(i)return{input:e,tokens:r,invalidReason:i.invalidReason};{const[t,n]=function(t){return[`^${t.map((t=>t.regex)).reduce(((t,e)=>`${t}(${e.source})`),"")}$`,t]}(s),i=RegExp(t,"i"),[a,o]=function(t,e,n){const r=t.match(e);if(r){const t={};let e=1;for(const s in n)if(kt(n,s)){const i=n[s],a=i.groups?i.groups+1:1;!i.literal&&i.token&&(t[i.token.val[0]]=i.deser(r.slice(e,e+a))),e+=a}return[r,t]}return[r,{}]}(e,i,n),[u,l,c]=o?function(t){let e,n=null;return At(t.z)||(n=Y.create(t.z)),At(t.Z)||(n||(n=new ot(t.Z)),e=t.Z),At(t.q)||(t.M=3*(t.q-1)+1),At(t.h)||(t.h<12&&1===t.a?t.h+=12:12===t.h&&0===t.a&&(t.h=0)),0===t.G&&t.y&&(t.y=-t.y),At(t.u)||(t.S=Ot(t.u)),[Object.keys(t).reduce(((e,n)=>{const r=(t=>{switch(t){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}})(n);return r&&(e[r]=t[n]),e}),{}),n,e]}(o):[null,null,void 0];if(kt(o,"a")&&kt(o,"H"))throw new m("Can't include meridiem when specifying 24-hour format");return{input:e,tokens:r,regex:i,rawMatches:a,matches:o,result:u,zone:l,specificOffset:c}}}function bn(t,e){return t?re.create(e,t).formatDateTimeParts((An||(An=rr.fromMillis(1555555555555)),An)).map((e=>function(t,e){const{type:n,value:r}=t;if("literal"===n){const t=/^\s+$/.test(r);return{literal:!t,val:t?" ":r}}const s=e[n];let i=gn[n];if("object"==typeof i&&(i=i[s]),i)return{literal:!1,val:i}}(e,t))):null}const En=[0,31,59,90,120,151,181,212,243,273,304,334],kn=[0,31,60,91,121,152,182,213,244,274,305,335];function xn(t,e){return new se("unit out of range",`you specified ${e} (of type ${typeof e}) as a ${t}, which is invalid`)}function Sn(t,e,n){const r=new Date(Date.UTC(t,e-1,n));t<100&&t>=0&&r.setUTCFullYear(r.getUTCFullYear()-1900);const s=r.getUTCDay();return 0===s?7:s}function Tn(t,e,n){return n+(Mt(t)?kn:En)[e-1]}function Cn(t,e){const n=Mt(t)?kn:En,r=n.findIndex((t=>t<e));return{month:r+1,day:e-n[r]}}function On(t){const{year:e,month:n,day:r}=t,s=Tn(e,n,r),i=Sn(e,n,r);let a,o=Math.floor((s-i+10)/7);return o<1?(a=e-1,o=Vt(a)):o>Vt(e)?(a=e+1,o=1):a=e,{weekYear:a,weekNumber:o,weekday:i,...qt(t)}}function Nn(t){const{weekYear:e,weekNumber:n,weekday:r}=t,s=Sn(e,1,4),i=Bt(e);let a,o=7*n+r-s-3;o<1?(a=e-1,o+=Bt(a)):o>i?(a=e+1,o-=Bt(e)):a=e;const{month:u,day:l}=Cn(a,o);return{year:a,month:u,day:l,...qt(t)}}function Mn(t){const{year:e,month:n,day:r}=t;return{year:e,ordinal:Tn(e,n,r),...qt(t)}}function Bn(t){const{year:e,ordinal:n}=t,{month:r,day:s}=Cn(e,n);return{year:e,month:r,day:s,...qt(t)}}function Dn(t){const e=vt(t.year),n=xt(t.month,1,12),r=xt(t.day,1,Dt(t.year,t.month));return e?n?!r&&xn("day",t.day):xn("month",t.month):xn("year",t.year)}function In(t){const{hour:e,minute:n,second:r,millisecond:s}=t,i=xt(e,0,23)||24===e&&0===n&&0===r&&0===s,a=xt(n,0,59),o=xt(r,0,59),u=xt(s,0,999);return i?a?o?!u&&xn("millisecond",s):xn("second",r):xn("minute",n):xn("hour",e)}const Vn="Invalid DateTime",$n=864e13;function Zn(t){return new se("unsupported zone",`the zone "${t.name}" is not supported`)}function Ln(t){return null===t.weekData&&(t.weekData=On(t.c)),t.weekData}function Fn(t,e){const n={ts:t.ts,zone:t.zone,c:t.c,o:t.o,loc:t.loc,invalid:t.invalid};return new rr({...n,...e,old:n})}function jn(t,e,n){let r=t-60*e*1e3;const s=n.offset(r);if(e===s)return[r,e];r-=60*(s-e)*1e3;const i=n.offset(r);return s===i?[r,s]:[t-60*Math.min(s,i)*1e3,Math.max(s,i)]}function zn(t,e){const n=new Date(t+=60*e*1e3);return{year:n.getUTCFullYear(),month:n.getUTCMonth()+1,day:n.getUTCDate(),hour:n.getUTCHours(),minute:n.getUTCMinutes(),second:n.getUTCSeconds(),millisecond:n.getUTCMilliseconds()}}function qn(t,e,n){return jn(It(t),e,n)}function Un(t,e){const n=t.o,r=t.c.year+Math.trunc(e.years),s=t.c.month+Math.trunc(e.months)+3*Math.trunc(e.quarters),i={...t.c,year:r,month:s,day:Math.min(t.c.day,Dt(r,s))+Math.trunc(e.days)+7*Math.trunc(e.weeks)},a=Ke.fromObject({years:e.years-Math.trunc(e.years),quarters:e.quarters-Math.trunc(e.quarters),months:e.months-Math.trunc(e.months),weeks:e.weeks-Math.trunc(e.weeks),days:e.days-Math.trunc(e.days),hours:e.hours,minutes:e.minutes,seconds:e.seconds,milliseconds:e.milliseconds}).as("milliseconds"),o=It(i);let[u,l]=jn(o,n,t.zone);return 0!==a&&(u+=a,l=t.zone.offset(u)),{ts:u,o:l}}function _n(t,e,n,r,s,i){const{setZone:a,zone:o}=n;if(t&&0!==Object.keys(t).length||e){const r=e||o,s=rr.fromObject(t,{...n,zone:r,specificOffset:i});return a?s:s.setZone(o)}return rr.invalid(new se("unparsable",`the input "${s}" can't be parsed as ${r}`))}function Wn(t,e,n=!0){return t.isValid?re.create(it.create("en-US"),{allowZ:n,forceSimple:!0}).formatDateTimeFromString(t,e):null}function Hn(t,e){const n=t.c.year>9999||t.c.year<0;let r="";return n&&t.c.year>=0&&(r+="+"),r+=St(t.c.year,n?6:4),e?(r+="-",r+=St(t.c.month),r+="-",r+=St(t.c.day)):(r+=St(t.c.month),r+=St(t.c.day)),r}function Rn(t,e,n,r,s,i){let a=St(t.c.hour);return e?(a+=":",a+=St(t.c.minute),0===t.c.second&&n||(a+=":")):a+=St(t.c.minute),0===t.c.second&&n||(a+=St(t.c.second),0===t.c.millisecond&&r||(a+=".",a+=St(t.c.millisecond,3))),s&&(t.isOffsetFixed&&0===t.offset&&!i?a+="Z":t.o<0?(a+="-",a+=St(Math.trunc(-t.o/60)),a+=":",a+=St(Math.trunc(-t.o%60))):(a+="+",a+=St(Math.trunc(t.o/60)),a+=":",a+=St(Math.trunc(t.o%60)))),i&&(a+="["+t.zone.ianaName+"]"),a}const Jn={month:1,day:1,hour:0,minute:0,second:0,millisecond:0},Yn={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},Pn={ordinal:1,hour:0,minute:0,second:0,millisecond:0},Gn=["year","month","day","hour","minute","second","millisecond"],Qn=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],Xn=["year","ordinal","hour","minute","second","millisecond"];function Kn(t){const e={year:"year",years:"year",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",minute:"minute",minutes:"minute",quarter:"quarter",quarters:"quarter",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"}[t.toLowerCase()];if(!e)throw new f(t);return e}function tr(t,e){const n=lt(e.zone,gt.defaultZone),r=it.fromObject(e),s=gt.now();let i,a;if(At(t.year))i=s;else{for(const e of Gn)At(t[e])&&(t[e]=Jn[e]);const e=Dn(t)||In(t);if(e)return rr.invalid(e);const r=n.offset(s);[i,a]=qn(t,r,n)}return new rr({ts:i,zone:n,loc:r,o:a})}function er(t,e,n){const r=!!At(n.round)||n.round,s=(t,s)=>(t=Nt(t,r||n.calendary?0:2,!0),e.loc.clone(n).relFormatter(n).format(t,s)),i=r=>n.calendary?e.hasSame(t,r)?0:e.startOf(r).diff(t.startOf(r),r).get(r):e.diff(t,r).get(r);if(n.unit)return s(i(n.unit),n.unit);for(const t of n.units){const e=i(t);if(Math.abs(e)>=1)return s(e,t)}return s(t>e?-0:0,n.units[n.units.length-1])}function nr(t){let e,n={};return t.length>0&&"object"==typeof t[t.length-1]?(n=t[t.length-1],e=Array.from(t).slice(0,t.length-1)):e=Array.from(t),[n,e]}class rr{constructor(t){const e=t.zone||gt.defaultZone;let n=t.invalid||(Number.isNaN(t.ts)?new se("invalid input"):null)||(e.isValid?null:Zn(e));this.ts=At(t.ts)?gt.now():t.ts;let r=null,s=null;if(!n)if(t.old&&t.old.ts===this.ts&&t.old.zone.equals(e))[r,s]=[t.old.c,t.old.o];else{const t=e.offset(this.ts);r=zn(this.ts,t),n=Number.isNaN(r.year)?new se("invalid input"):null,r=n?null:r,s=n?null:t}this._zone=e,this.loc=t.loc||it.create(),this.invalid=n,this.weekData=null,this.c=r,this.o=s,this.isLuxonDateTime=!0}static now(){return new rr({})}static local(){const[t,e]=nr(arguments),[n,r,s,i,a,o,u]=e;return tr({year:n,month:r,day:s,hour:i,minute:a,second:o,millisecond:u},t)}static utc(){const[t,e]=nr(arguments),[n,r,s,i,a,o,u]=e;return t.zone=ot.utcInstance,tr({year:n,month:r,day:s,hour:i,minute:a,second:o,millisecond:u},t)}static fromJSDate(t,e={}){const n=(r=t,"[object Date]"===Object.prototype.toString.call(r)?t.valueOf():NaN);var r;if(Number.isNaN(n))return rr.invalid("invalid input");const s=lt(e.zone,gt.defaultZone);return s.isValid?new rr({ts:n,zone:s,loc:it.fromObject(e)}):rr.invalid(Zn(s))}static fromMillis(t,e={}){if(wt(t))return t<-$n||t>$n?rr.invalid("Timestamp out of range"):new rr({ts:t,zone:lt(e.zone,gt.defaultZone),loc:it.fromObject(e)});throw new y(`fromMillis requires a numerical input, but received a ${typeof t} with value ${t}`)}static fromSeconds(t,e={}){if(wt(t))return new rr({ts:1e3*t,zone:lt(e.zone,gt.defaultZone),loc:it.fromObject(e)});throw new y("fromSeconds requires a numerical input")}static fromObject(t,e={}){t=t||{};const n=lt(e.zone,gt.defaultZone);if(!n.isValid)return rr.invalid(Zn(n));const r=gt.now(),s=At(e.specificOffset)?n.offset(r):e.specificOffset,i=jt(t,Kn),a=!At(i.ordinal),o=!At(i.year),u=!At(i.month)||!At(i.day),l=o||u,c=i.weekYear||i.weekNumber,d=it.fromObject(e);if((l||a)&&c)throw new m("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(u&&a)throw new m("Can't mix ordinal dates with month/day");const h=c||i.weekday&&!l;let f,y,p=zn(r,s);h?(f=Qn,y=Yn,p=On(p)):a?(f=Xn,y=Pn,p=Mn(p)):(f=Gn,y=Jn);let g=!1;for(const t of f)At(i[t])?i[t]=g?y[t]:p[t]:g=!0;const A=h?function(t){const e=vt(t.weekYear),n=xt(t.weekNumber,1,Vt(t.weekYear)),r=xt(t.weekday,1,7);return e?n?!r&&xn("weekday",t.weekday):xn("week",t.week):xn("weekYear",t.weekYear)}(i):a?function(t){const e=vt(t.year),n=xt(t.ordinal,1,Bt(t.year));return e?!n&&xn("ordinal",t.ordinal):xn("year",t.year)}(i):Dn(i),w=A||In(i);if(w)return rr.invalid(w);const v=h?Nn(i):a?Bn(i):i,[b,E]=qn(v,s,n),k=new rr({ts:b,zone:n,o:E,loc:d});return i.weekday&&l&&t.weekday!==k.weekday?rr.invalid("mismatched weekday",`you can't specify both a weekday of ${i.weekday} and a date of ${k.toISO()}`):k}static fromISO(t,e={}){const[n,r]=function(t){return ue(t,[Ve,Fe],[$e,je],[Ze,ze],[Le,qe])}(t);return _n(n,r,e,"ISO 8601",t)}static fromRFC2822(t,e={}){const[n,r]=function(t){return ue(function(t){return t.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}(t),[Ce,Oe])}(t);return _n(n,r,e,"RFC 2822",t)}static fromHTTP(t,e={}){const[n,r]=function(t){return ue(t,[Ne,De],[Me,De],[Be,Ie])}(t);return _n(n,r,e,"HTTP",e)}static fromFormat(t,e,n={}){if(At(t)||At(e))throw new y("fromFormat requires an input string and a format");const{locale:r=null,numberingSystem:s=null}=n,i=it.fromOpts({locale:r,numberingSystem:s,defaultToEN:!0}),[a,o,u,l]=function(t,e,n){const{result:r,zone:s,specificOffset:i,invalidReason:a}=vn(t,e,n);return[r,s,i,a]}(i,t,e);return l?rr.invalid(l):_n(a,o,n,`format ${e}`,t,u)}static fromString(t,e,n={}){return rr.fromFormat(t,e,n)}static fromSQL(t,e={}){const[n,r]=function(t){return ue(t,[_e,Fe],[We,He])}(t);return _n(n,r,e,"SQL",t)}static invalid(t,e=null){if(!t)throw new y("need to specify a reason the DateTime is invalid");const n=t instanceof se?t:new se(t,e);if(gt.throwOnInvalid)throw new c(n);return new rr({invalid:n})}static isDateTime(t){return t&&t.isLuxonDateTime||!1}static parseFormatForOpts(t,e={}){const n=bn(t,it.fromObject(e));return n?n.map((t=>t?t.val:null)).join(""):null}static expandFormat(t,e={}){return wn(re.parseFormat(t),it.fromObject(e)).map((t=>t.val)).join("")}get(t){return this[t]}get isValid(){return null===this.invalid}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}get outputCalendar(){return this.isValid?this.loc.outputCalendar:null}get zone(){return this._zone}get zoneName(){return this.isValid?this.zone.name:null}get year(){return this.isValid?this.c.year:NaN}get quarter(){return this.isValid?Math.ceil(this.c.month/3):NaN}get month(){return this.isValid?this.c.month:NaN}get day(){return this.isValid?this.c.day:NaN}get hour(){return this.isValid?this.c.hour:NaN}get minute(){return this.isValid?this.c.minute:NaN}get second(){return this.isValid?this.c.second:NaN}get millisecond(){return this.isValid?this.c.millisecond:NaN}get weekYear(){return this.isValid?Ln(this).weekYear:NaN}get weekNumber(){return this.isValid?Ln(this).weekNumber:NaN}get weekday(){return this.isValid?Ln(this).weekday:NaN}get ordinal(){return this.isValid?Mn(this.c).ordinal:NaN}get monthShort(){return this.isValid?nn.months("short",{locObj:this.loc})[this.month-1]:null}get monthLong(){return this.isValid?nn.months("long",{locObj:this.loc})[this.month-1]:null}get weekdayShort(){return this.isValid?nn.weekdays("short",{locObj:this.loc})[this.weekday-1]:null}get weekdayLong(){return this.isValid?nn.weekdays("long",{locObj:this.loc})[this.weekday-1]:null}get offset(){return this.isValid?+this.o:NaN}get offsetNameShort(){return this.isValid?this.zone.offsetName(this.ts,{format:"short",locale:this.locale}):null}get offsetNameLong(){return this.isValid?this.zone.offsetName(this.ts,{format:"long",locale:this.locale}):null}get isOffsetFixed(){return this.isValid?this.zone.isUniversal:null}get isInDST(){return!this.isOffsetFixed&&(this.offset>this.set({month:1,day:1}).offset||this.offset>this.set({month:5}).offset)}get isInLeapYear(){return Mt(this.year)}get daysInMonth(){return Dt(this.year,this.month)}get daysInYear(){return this.isValid?Bt(this.year):NaN}get weeksInWeekYear(){return this.isValid?Vt(this.weekYear):NaN}resolvedLocaleOptions(t={}){const{locale:e,numberingSystem:n,calendar:r}=re.create(this.loc.clone(t),t).resolvedOptions(this);return{locale:e,numberingSystem:n,outputCalendar:r}}toUTC(t=0,e={}){return this.setZone(ot.instance(t),e)}toLocal(){return this.setZone(gt.defaultZone)}setZone(t,{keepLocalTime:e=!1,keepCalendarTime:n=!1}={}){if((t=lt(t,gt.defaultZone)).equals(this.zone))return this;if(t.isValid){let r=this.ts;if(e||n){const e=t.offset(this.ts),n=this.toObject();[r]=qn(n,e,t)}return Fn(this,{ts:r,zone:t})}return rr.invalid(Zn(t))}reconfigure({locale:t,numberingSystem:e,outputCalendar:n}={}){return Fn(this,{loc:this.loc.clone({locale:t,numberingSystem:e,outputCalendar:n})})}setLocale(t){return this.reconfigure({locale:t})}set(t){if(!this.isValid)return this;const e=jt(t,Kn),n=!At(e.weekYear)||!At(e.weekNumber)||!At(e.weekday),r=!At(e.ordinal),s=!At(e.year),i=!At(e.month)||!At(e.day),a=s||i,o=e.weekYear||e.weekNumber;if((a||r)&&o)throw new m("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(i&&r)throw new m("Can't mix ordinal dates with month/day");let u;n?u=Nn({...On(this.c),...e}):At(e.ordinal)?(u={...this.toObject(),...e},At(e.day)&&(u.day=Math.min(Dt(u.year,u.month),u.day))):u=Bn({...Mn(this.c),...e});const[l,c]=qn(u,this.o,this.zone);return Fn(this,{ts:l,o:c})}plus(t){return this.isValid?Fn(this,Un(this,Ke.fromDurationLike(t))):this}minus(t){return this.isValid?Fn(this,Un(this,Ke.fromDurationLike(t).negate())):this}startOf(t){if(!this.isValid)return this;const e={},n=Ke.normalizeUnit(t);switch(n){case"years":e.month=1;case"quarters":case"months":e.day=1;case"weeks":case"days":e.hour=0;case"hours":e.minute=0;case"minutes":e.second=0;case"seconds":e.millisecond=0}if("weeks"===n&&(e.weekday=1),"quarters"===n){const t=Math.ceil(this.month/3);e.month=3*(t-1)+1}return this.set(e)}endOf(t){return this.isValid?this.plus({[t]:1}).startOf(t).minus(1):this}toFormat(t,e={}){return this.isValid?re.create(this.loc.redefaultToEN(e)).formatDateTimeFromString(this,t):Vn}toLocaleString(t=v,e={}){return this.isValid?re.create(this.loc.clone(e),t).formatDateTime(this):Vn}toLocaleParts(t={}){return this.isValid?re.create(this.loc.clone(t),t).formatDateTimeParts(this):[]}toISO({format:t="extended",suppressSeconds:e=!1,suppressMilliseconds:n=!1,includeOffset:r=!0,extendedZone:s=!1}={}){if(!this.isValid)return null;const i="extended"===t;let a=Hn(this,i);return a+="T",a+=Rn(this,i,e,n,r,s),a}toISODate({format:t="extended"}={}){return this.isValid?Hn(this,"extended"===t):null}toISOWeekDate(){return Wn(this,"kkkk-'W'WW-c")}toISOTime({suppressMilliseconds:t=!1,suppressSeconds:e=!1,includeOffset:n=!0,includePrefix:r=!1,extendedZone:s=!1,format:i="extended"}={}){return this.isValid?(r?"T":"")+Rn(this,"extended"===i,e,t,n,s):null}toRFC2822(){return Wn(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)}toHTTP(){return Wn(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")}toSQLDate(){return this.isValid?Hn(this,!0):null}toSQLTime({includeOffset:t=!0,includeZone:e=!1,includeOffsetSpace:n=!0}={}){let r="HH:mm:ss.SSS";return(e||t)&&(n&&(r+=" "),e?r+="z":t&&(r+="ZZ")),Wn(this,r,!0)}toSQL(t={}){return this.isValid?`${this.toSQLDate()} ${this.toSQLTime(t)}`:null}toString(){return this.isValid?this.toISO():Vn}valueOf(){return this.toMillis()}toMillis(){return this.isValid?this.ts:NaN}toSeconds(){return this.isValid?this.ts/1e3:NaN}toUnixInteger(){return this.isValid?Math.floor(this.ts/1e3):NaN}toJSON(){return this.toISO()}toBSON(){return this.toJSDate()}toObject(t={}){if(!this.isValid)return{};const e={...this.c};return t.includeConfig&&(e.outputCalendar=this.outputCalendar,e.numberingSystem=this.loc.numberingSystem,e.locale=this.loc.locale),e}toJSDate(){return new Date(this.isValid?this.ts:NaN)}diff(t,e="milliseconds",n={}){if(!this.isValid||!t.isValid)return Ke.invalid("created by diffing an invalid DateTime");const r={locale:this.locale,numberingSystem:this.numberingSystem,...n},s=(o=e,Array.isArray(o)?o:[o]).map(Ke.normalizeUnit),i=t.valueOf()>this.valueOf(),a=function(t,e,n,r){let[s,i,a,o]=function(t,e,n){const r=[["years",(t,e)=>e.year-t.year],["quarters",(t,e)=>e.quarter-t.quarter+4*(e.year-t.year)],["months",(t,e)=>e.month-t.month+12*(e.year-t.year)],["weeks",(t,e)=>{const n=rn(t,e);return(n-n%7)/7}],["days",rn]],s={},i=t;let a,o;for(const[u,l]of r)n.indexOf(u)>=0&&(a=u,s[u]=l(t,e),o=i.plus(s),o>e?(s[u]--,t=i.plus(s)):t=o);return[t,s,o,a]}(t,e,n);const u=e-s,l=n.filter((t=>["hours","minutes","seconds","milliseconds"].indexOf(t)>=0));0===l.length&&(a<e&&(a=s.plus({[o]:1})),a!==s&&(i[o]=(i[o]||0)+u/(a-s)));const c=Ke.fromObject(i,r);return l.length>0?Ke.fromMillis(u,r).shiftTo(...l).plus(c):c}(i?this:t,i?t:this,s,r);var o;return i?a.negate():a}diffNow(t="milliseconds",e={}){return this.diff(rr.now(),t,e)}until(t){return this.isValid?en.fromDateTimes(this,t):this}hasSame(t,e){if(!this.isValid)return!1;const n=t.valueOf(),r=this.setZone(t.zone,{keepLocalTime:!0});return r.startOf(e)<=n&&n<=r.endOf(e)}equals(t){return this.isValid&&t.isValid&&this.valueOf()===t.valueOf()&&this.zone.equals(t.zone)&&this.loc.equals(t.loc)}toRelative(t={}){if(!this.isValid)return null;const e=t.base||rr.fromObject({},{zone:this.zone}),n=t.padding?this<e?-t.padding:t.padding:0;let r=["years","months","days","hours","minutes","seconds"],s=t.unit;return Array.isArray(t.unit)&&(r=t.unit,s=void 0),er(e,this.plus(n),{...t,numeric:"always",units:r,unit:s})}toRelativeCalendar(t={}){return this.isValid?er(t.base||rr.fromObject({},{zone:this.zone}),this,{...t,numeric:"auto",units:["years","months","days"],calendary:!0}):null}static min(...t){if(!t.every(rr.isDateTime))throw new y("min requires all arguments be DateTimes");return Et(t,(t=>t.valueOf()),Math.min)}static max(...t){if(!t.every(rr.isDateTime))throw new y("max requires all arguments be DateTimes");return Et(t,(t=>t.valueOf()),Math.max)}static fromFormatExplain(t,e,n={}){const{locale:r=null,numberingSystem:s=null}=n;return vn(it.fromOpts({locale:r,numberingSystem:s,defaultToEN:!0}),t,e)}static fromStringExplain(t,e,n={}){return rr.fromFormatExplain(t,e,n)}static get DATE_SHORT(){return v}static get DATE_MED(){return b}static get DATE_MED_WITH_WEEKDAY(){return E}static get DATE_FULL(){return k}static get DATE_HUGE(){return x}static get TIME_SIMPLE(){return S}static get TIME_WITH_SECONDS(){return T}static get TIME_WITH_SHORT_OFFSET(){return C}static get TIME_WITH_LONG_OFFSET(){return O}static get TIME_24_SIMPLE(){return N}static get TIME_24_WITH_SECONDS(){return M}static get TIME_24_WITH_SHORT_OFFSET(){return B}static get TIME_24_WITH_LONG_OFFSET(){return D}static get DATETIME_SHORT(){return I}static get DATETIME_SHORT_WITH_SECONDS(){return V}static get DATETIME_MED(){return $}static get DATETIME_MED_WITH_SECONDS(){return Z}static get DATETIME_MED_WITH_WEEKDAY(){return L}static get DATETIME_FULL(){return F}static get DATETIME_FULL_WITH_SECONDS(){return j}static get DATETIME_HUGE(){return z}static get DATETIME_HUGE_WITH_SECONDS(){return q}}function sr(t){if(rr.isDateTime(t))return t;if(t&&t.valueOf&&wt(t.valueOf()))return rr.fromJSDate(t);if(t&&"object"==typeof t)return rr.fromObject(t);throw new y(`Unknown datetime argument: ${t}, of type ${typeof t}`)}const ir=()=>{const t=rr.local().toLocaleString(rr.DATE_MED),{hour:e,minute:n,second:r}=rr.local().c,s=t=>{let e;return e=t<10?`0${t}`:`${t}`,e},i=s(e),a=s(n),o=s(r);document.querySelector(".time").textContent=`${t} ${i}:${a}:${o}`};var ar=n(379),or=n.n(ar),ur=n(795),lr=n.n(ur),cr=n(569),dr=n.n(cr),hr=n(565),mr=n.n(hr),fr=n(216),yr=n.n(fr),pr=n(589),gr=n.n(pr),Ar=n(424),wr={};wr.styleTagTransform=gr(),wr.setAttributes=mr(),wr.insert=dr().bind(null,"head"),wr.domAPI=lr(),wr.insertStyleElement=yr(),or()(Ar.Z,wr),Ar.Z&&Ar.Z.locals&&Ar.Z.locals;const vr=document.getElementById("add"),br=document.getElementById("title"),Er=document.getElementById("author"),kr=document.querySelector(".bookshelf"),xr="Books",Sr="book-row",Tr=document.querySelectorAll(".nav a"),Cr=document.querySelectorAll("section");setInterval(ir,1e3),ir();const Or=new u.BookBinding(xr),Nr=t=>{const{hash:e}=window.location;e.length>1&&(t.forEach((t=>{t.id===e.substring(1)?t.style.display="flex":t.style.display="none"})),Tr.forEach((t=>{t.getAttribute("href")===e.substring(1)?t.classList.add("active"):t.classList.remove("active")})))};kr.addEventListener("click",(t=>{if(t.target.classList.contains("removeBtn")){const e=parseInt(t.target.dataset.index,10),n=document.querySelector(`[data-book="${e}"]`);Or.removeBook(e,n,kr),kr.innerHTML="",u.BookBinding.update(kr,xr,Sr)}})),Tr.forEach((t=>{t.addEventListener("click",(e=>{e.preventDefault(),t.classList.add("active"),window.location.hash=t.getAttribute("href"),Nr(Cr)}))})),vr.addEventListener("click",(t=>{t.preventDefault(),Or.add(br,Er,kr,Sr)})),window.addEventListener("load",(()=>{u.BookBinding.update(kr,xr,Sr),Nr(Cr)}))}},t=>{t(t.s=273)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,